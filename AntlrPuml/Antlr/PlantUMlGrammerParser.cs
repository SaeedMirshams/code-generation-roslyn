//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PlantUMLGrammer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class PlantUMLGrammerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, Color=23, NAMESPACE=24, 
		CLASS=25, ENUM=26, ABSTRACT=27, INTERFACE=28, COLON=29, STRING=30, SIGN=31, 
		NUMBER=32, STARTUML=33, ENDUML=34, AQOLADBAZ=35, AQOLADBASTE=36, SPACE=37, 
		NewLine=38, NOTE=39, Identifier=40, ENDNOTE=41, Unicode=42;
	public const int
		RULE_file = 0, RULE_namespace_def = 1, RULE_type_definition = 2, RULE_enum_def = 3, 
		RULE_field_def_block = 4, RULE_field_def = 5, RULE_method_field = 6, RULE_class_def = 7, 
		RULE_streotype_def = 8, RULE_streotypename = 9, RULE_singleline_comment = 10, 
		RULE_rest_of_line = 11, RULE_abstractclass_def = 12, RULE_interface_def = 13, 
		RULE_color = 14, RULE_extrafield = 15, RULE_relation = 16, RULE_direction = 17, 
		RULE_from = 18, RULE_to = 19, RULE_interface_name = 20, RULE_linktext = 21, 
		RULE_relationType = 22, RULE_accessor = 23, RULE_fieldName = 24, RULE_ownerClass = 25, 
		RULE_fieldType = 26, RULE_class_name = 27, RULE_enum_name = 28, RULE_namespace_name = 29, 
		RULE_identifier = 30, RULE_dotIdentifier = 31, RULE_note_expr = 32, RULE_somethingsToEndNote = 33, 
		RULE_somethings = 34;
	public static readonly string[] ruleNames = {
		"file", "namespace_def", "type_definition", "enum_def", "field_def_block", 
		"field_def", "method_field", "class_def", "streotype_def", "streotypename", 
		"singleline_comment", "rest_of_line", "abstractclass_def", "interface_def", 
		"color", "extrafield", "relation", "direction", "from", "to", "interface_name", 
		"linktext", "relationType", "accessor", "fieldName", "ownerClass", "fieldType", 
		"class_name", "enum_name", "namespace_name", "identifier", "dotIdentifier", 
		"note_expr", "somethingsToEndNote", "somethings"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{method}'", "'{field}'", "'<<'", "'>>'", "'''", "'#'", "'('", 
		"')'", "'<'", "'>'", "'--|>'", "'--'", "'<|--'", "'-->'", "'<--'", "'*--'", 
		"'*-'", "'-'", "'+'", "'~'", "'\"'", "'.'", null, null, "'class'", "'enum'", 
		"'abstract'", "'interface'", "':'", null, null, null, "'@startuml'", "'@enduml'", 
		"'{'", "'}'", null, null, "'note'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, "Color", 
		"NAMESPACE", "CLASS", "ENUM", "ABSTRACT", "INTERFACE", "COLON", "STRING", 
		"SIGN", "NUMBER", "STARTUML", "ENDUML", "AQOLADBAZ", "AQOLADBASTE", "SPACE", 
		"NewLine", "NOTE", "Identifier", "ENDNOTE", "Unicode"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PlantUMLGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PlantUMLGrammerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PlantUMLGrammerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PlantUMLGrammerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTUML() { return GetToken(PlantUMLGrammerParser.STARTUML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDUML() { return GetToken(PlantUMLGrammerParser.ENDUML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PlantUMLGrammerParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext[] type_definition() {
			return GetRuleContexts<Type_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext type_definition(int i) {
			return GetRuleContext<Type_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(PlantUMLGrammerParser.SPACE, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			Match(STARTUML);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1650863374368L) != 0) {
				{
				{
				State = 71;
				type_definition();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACE) {
				{
				State = 77;
				Match(SPACE);
				}
			}

			State = 80;
			Match(ENDUML);
			State = 81;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(PlantUMLGrammerParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name() {
			return GetRuleContext<Namespace_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AQOLADBAZ() { return GetToken(PlantUMLGrammerParser.AQOLADBAZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AQOLADBASTE() { return GetToken(PlantUMLGrammerParser.AQOLADBASTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext[] type_definition() {
			return GetRuleContexts<Type_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext type_definition(int i) {
			return GetRuleContext<Type_definitionContext>(i);
		}
		public Namespace_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterNamespace_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitNamespace_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_defContext namespace_def() {
		Namespace_defContext _localctx = new Namespace_defContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(NAMESPACE);
			State = 84;
			Match(SPACE);
			State = 85;
			namespace_name();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACE) {
				{
				State = 86;
				Match(SPACE);
				}
			}

			State = 89;
			Match(AQOLADBAZ);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1650863374368L) != 0) {
				{
				{
				State = 90;
				type_definition();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 96;
			Match(AQOLADBASTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Note_exprContext note_expr() {
			return GetRuleContext<Note_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Abstractclass_defContext abstractclass_def() {
			return GetRuleContext<Abstractclass_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_defContext interface_def() {
			return GetRuleContext<Interface_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_defContext namespace_def() {
			return GetRuleContext<Namespace_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_defContext enum_def() {
			return GetRuleContext<Enum_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_defContext class_def() {
			return GetRuleContext<Class_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtrafieldContext extrafield() {
			return GetRuleContext<ExtrafieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation() {
			return GetRuleContext<RelationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Singleline_commentContext singleline_comment() {
			return GetRuleContext<Singleline_commentContext>(0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_definitionContext type_definition() {
		Type_definitionContext _localctx = new Type_definitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_type_definition);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				note_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99;
				abstractclass_def();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 100;
				interface_def();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 101;
				namespace_def();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 102;
				enum_def();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 103;
				class_def();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 104;
				extrafield();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 105;
				relation();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 106;
				singleline_comment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(PlantUMLGrammerParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_nameContext enum_name() {
			return GetRuleContext<Enum_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Streotype_defContext streotype_def() {
			return GetRuleContext<Streotype_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_def_blockContext field_def_block() {
			return GetRuleContext<Field_def_blockContext>(0);
		}
		public Enum_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterEnum_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitEnum_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_defContext enum_def() {
		Enum_defContext _localctx = new Enum_defContext(Context, State);
		EnterRule(_localctx, 6, RULE_enum_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(ENUM);
			State = 110;
			Match(SPACE);
			State = 111;
			enum_name();
			State = 113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 112;
				Match(SPACE);
				}
				break;
			}
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 115;
				streotype_def();
				}
			}

			State = 120;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 118;
				Match(SPACE);
				State = 119;
				color();
				}
				break;
			}
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AQOLADBAZ) {
				{
				State = 122;
				field_def_block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_def_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AQOLADBAZ() { return GetToken(PlantUMLGrammerParser.AQOLADBAZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AQOLADBASTE() { return GetToken(PlantUMLGrammerParser.AQOLADBASTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_defContext[] field_def() {
			return GetRuleContexts<Field_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_defContext field_def(int i) {
			return GetRuleContext<Field_defContext>(i);
		}
		public Field_def_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_def_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterField_def_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitField_def_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_def_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_def_blockContext field_def_block() {
		Field_def_blockContext _localctx = new Field_def_blockContext(Context, State);
		EnterRule(_localctx, 8, RULE_field_def_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			Match(AQOLADBAZ);
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1100589301830L) != 0) {
				{
				{
				State = 126;
				field_def();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 132;
			Match(AQOLADBASTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_fieldContext method_field() {
			return GetRuleContext<Method_fieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext accessor() {
			return GetRuleContext<AccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldTypeContext fieldType() {
			return GetRuleContext<FieldTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		public Field_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterField_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitField_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_defContext field_def() {
		Field_defContext _localctx = new Field_defContext(Context, State);
		EnterRule(_localctx, 10, RULE_field_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__1) {
				{
				State = 134;
				method_field();
				}
			}

			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 1835072L) != 0) {
				{
				State = 137;
				accessor();
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 138;
					Match(SPACE);
					}
				}

				State = 141;
				fieldType();
				State = 142;
				Match(SPACE);
				}
			}

			State = 146;
			fieldName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_fieldContext : ParserRuleContext {
		public Method_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterMethod_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitMethod_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_fieldContext method_field() {
		Method_fieldContext _localctx = new Method_fieldContext(Context, State);
		EnterRule(_localctx, 12, RULE_method_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PlantUMLGrammerParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Streotype_defContext streotype_def() {
			return GetRuleContext<Streotype_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_def_blockContext field_def_block() {
			return GetRuleContext<Field_def_blockContext>(0);
		}
		public Class_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterClass_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitClass_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_defContext class_def() {
		Class_defContext _localctx = new Class_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_class_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(CLASS);
			State = 151;
			Match(SPACE);
			State = 152;
			class_name();
			State = 154;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 153;
				Match(SPACE);
				}
				break;
			}
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 156;
				streotype_def();
				}
			}

			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 159;
				Match(SPACE);
				State = 160;
				color();
				}
				break;
			}
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AQOLADBAZ) {
				{
				State = 163;
				field_def_block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Streotype_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StreotypenameContext streotypename() {
			return GetRuleContext<StreotypenameContext>(0);
		}
		public Streotype_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streotype_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterStreotype_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitStreotype_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreotype_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Streotype_defContext streotype_def() {
		Streotype_defContext _localctx = new Streotype_defContext(Context, State);
		EnterRule(_localctx, 16, RULE_streotype_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			Match(T__2);
			State = 167;
			streotypename();
			State = 168;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StreotypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StreotypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streotypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterStreotypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitStreotypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreotypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreotypenameContext streotypename() {
		StreotypenameContext _localctx = new StreotypenameContext(Context, State);
		EnterRule(_localctx, 18, RULE_streotypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Singleline_commentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rest_of_lineContext rest_of_line() {
			return GetRuleContext<Rest_of_lineContext>(0);
		}
		public Singleline_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleline_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterSingleline_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitSingleline_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleline_comment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Singleline_commentContext singleline_comment() {
		Singleline_commentContext _localctx = new Singleline_commentContext(Context, State);
		EnterRule(_localctx, 20, RULE_singleline_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(T__4);
			State = 173;
			rest_of_line();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rest_of_lineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NewLine() { return GetTokens(PlantUMLGrammerParser.NewLine); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NewLine(int i) {
			return GetToken(PlantUMLGrammerParser.NewLine, i);
		}
		public Rest_of_lineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rest_of_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterRest_of_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitRest_of_line(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRest_of_line(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rest_of_lineContext rest_of_line() {
		Rest_of_lineContext _localctx = new Rest_of_lineContext(Context, State);
		EnterRule(_localctx, 22, RULE_rest_of_line);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 175;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==NewLine) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 180;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstractclass_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(PlantUMLGrammerParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PlantUMLGrammerParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Streotype_defContext streotype_def() {
			return GetRuleContext<Streotype_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		public Abstractclass_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractclass_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterAbstractclass_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitAbstractclass_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractclass_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Abstractclass_defContext abstractclass_def() {
		Abstractclass_defContext _localctx = new Abstractclass_defContext(Context, State);
		EnterRule(_localctx, 24, RULE_abstractclass_def);
		int _la;
		try {
			State = 211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181;
				Match(ABSTRACT);
				State = 182;
				Match(SPACE);
				State = 183;
				Match(CLASS);
				State = 184;
				Match(SPACE);
				State = 185;
				class_name();
				State = 187;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
				case 1:
					{
					State = 186;
					Match(SPACE);
					}
					break;
				}
				State = 190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 189;
					streotype_def();
					}
				}

				State = 192;
				Match(SPACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194;
				Match(ABSTRACT);
				State = 195;
				Match(SPACE);
				State = 196;
				class_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 197;
				Match(ABSTRACT);
				State = 198;
				Match(SPACE);
				State = 199;
				class_name();
				State = 201;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
				case 1:
					{
					State = 200;
					Match(SPACE);
					}
					break;
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2) {
					{
					State = 203;
					streotype_def();
					}
				}

				State = 206;
				Match(SPACE);
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__5) {
					{
					State = 207;
					Match(T__5);
					State = 208;
					color();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(PlantUMLGrammerParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(PlantUMLGrammerParser.SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_nameContext interface_name() {
			return GetRuleContext<Interface_nameContext>(0);
		}
		public Interface_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterInterface_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitInterface_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_defContext interface_def() {
		Interface_defContext _localctx = new Interface_defContext(Context, State);
		EnterRule(_localctx, 26, RULE_interface_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			Match(INTERFACE);
			State = 214;
			Match(SPACE);
			State = 215;
			interface_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Color() { return GetToken(PlantUMLGrammerParser.Color, 0); }
		public ColorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_color; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterColor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitColor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColorContext color() {
		ColorContext _localctx = new ColorContext(Context, State);
		EnterRule(_localctx, 28, RULE_color);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217;
			Match(Color);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtrafieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OwnerClassContext ownerClass() {
			return GetRuleContext<OwnerClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PlantUMLGrammerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext accessor() {
			return GetRuleContext<AccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldTypeContext fieldType() {
			return GetRuleContext<FieldTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public ExtrafieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extrafield; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterExtrafield(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitExtrafield(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtrafield(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtrafieldContext extrafield() {
		ExtrafieldContext _localctx = new ExtrafieldContext(Context, State);
		EnterRule(_localctx, 30, RULE_extrafield);
		int _la;
		try {
			State = 255;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				ownerClass();
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 220;
					Match(SPACE);
					}
				}

				State = 223;
				Match(COLON);
				State = 224;
				Match(SPACE);
				State = 225;
				accessor();
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 226;
					Match(SPACE);
					}
				}

				State = 229;
				fieldType();
				State = 230;
				Match(SPACE);
				State = 231;
				fieldName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233;
				ownerClass();
				State = 235;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 234;
					Match(SPACE);
					}
				}

				State = 237;
				Match(COLON);
				State = 238;
				Match(SPACE);
				State = 239;
				accessor();
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 240;
					Match(SPACE);
					}
				}

				State = 243;
				fieldType();
				State = 244;
				Match(SPACE);
				State = 245;
				fieldName();
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 246;
					Match(SPACE);
					}
				}

				State = 249;
				Match(T__6);
				State = 251;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 250;
					Match(SPACE);
					}
				}

				State = 253;
				Match(T__7);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FromContext from() {
			return GetRuleContext<FromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationTypeContext relationType() {
			return GetRuleContext<RelationTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToContext to() {
			return GetRuleContext<ToContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PlantUMLGrammerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinktextContext linktext() {
			return GetRuleContext<LinktextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext[] direction() {
			return GetRuleContexts<DirectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction(int i) {
			return GetRuleContext<DirectionContext>(i);
		}
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 32, RULE_relation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			from();
			State = 258;
			Match(SPACE);
			State = 259;
			relationType();
			State = 260;
			Match(SPACE);
			State = 261;
			to();
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 262;
				Match(COLON);
				State = 264;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
				case 1:
					{
					State = 263;
					direction();
					}
					break;
				}
				State = 267;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 266;
					Match(SPACE);
					}
					break;
				}
				State = 269;
				linktext();
				State = 271;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 270;
					Match(SPACE);
					}
					break;
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__8 || _la==T__9) {
					{
					State = 273;
					direction();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 34, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278;
			_la = TokenStream.LA(1);
			if ( !(_la==T__8 || _la==T__9) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromContext from() {
		FromContext _localctx = new FromContext(Context, State);
		EnterRule(_localctx, 36, RULE_from);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ToContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_to; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterTo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitTo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToContext to() {
		ToContext _localctx = new ToContext(Context, State);
		EnterRule(_localctx, 38, RULE_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlantUMLGrammerParser.Identifier, 0); }
		public Interface_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterInterface_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitInterface_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_nameContext interface_name() {
		Interface_nameContext _localctx = new Interface_nameContext(Context, State);
		EnterRule(_localctx, 40, RULE_interface_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinktextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SomethingsContext somethings() {
			return GetRuleContext<SomethingsContext>(0);
		}
		public LinktextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linktext; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterLinktext(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitLinktext(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinktext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinktextContext linktext() {
		LinktextContext _localctx = new LinktextContext(Context, State);
		EnterRule(_localctx, 42, RULE_linktext);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			somethings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationTypeContext : ParserRuleContext {
		public RelationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterRelationType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitRelationType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationTypeContext relationType() {
		RelationTypeContext _localctx = new RelationTypeContext(Context, State);
		EnterRule(_localctx, 44, RULE_relationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 522240L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorContext : ParserRuleContext {
		public AccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorContext accessor() {
		AccessorContext _localctx = new AccessorContext(Context, State);
		EnterRule(_localctx, 46, RULE_accessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 1835072L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterFieldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitFieldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(Context, State);
		EnterRule(_localctx, 48, RULE_fieldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public OwnerClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ownerClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterOwnerClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitOwnerClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnerClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OwnerClassContext ownerClass() {
		OwnerClassContext _localctx = new OwnerClassContext(Context, State);
		EnterRule(_localctx, 50, RULE_ownerClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 294;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterFieldType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitFieldType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldTypeContext fieldType() {
		FieldTypeContext _localctx = new FieldTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_fieldType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlantUMLGrammerParser.Identifier, 0); }
		public Class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterClass_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitClass_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_nameContext class_name() {
		Class_nameContext _localctx = new Class_nameContext(Context, State);
		EnterRule(_localctx, 54, RULE_class_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlantUMLGrammerParser.Identifier, 0); }
		public Enum_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterEnum_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitEnum_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_nameContext enum_name() {
		Enum_nameContext _localctx = new Enum_nameContext(Context, State);
		EnterRule(_localctx, 56, RULE_enum_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public Namespace_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterNamespace_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitNamespace_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_nameContext namespace_name() {
		Namespace_nameContext _localctx = new Namespace_nameContext(Context, State);
		EnterRule(_localctx, 58, RULE_namespace_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			dotIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlantUMLGrammerParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PlantUMLGrammerParser.STRING, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_identifier);
		try {
			State = 309;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 304;
				Match(Identifier);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 305;
				Match(T__20);
				State = 306;
				Match(Identifier);
				State = 307;
				Match(T__20);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 308;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PlantUMLGrammerParser.STRING, 0); }
		public DotIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterDotIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitDotIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotIdentifierContext dotIdentifier() {
		DotIdentifierContext _localctx = new DotIdentifierContext(Context, State);
		EnterRule(_localctx, 62, RULE_dotIdentifier);
		try {
			State = 317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 311;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 312;
				identifier();
				State = 313;
				Match(T__21);
				State = 314;
				dotIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 316;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Note_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTE() { return GetToken(PlantUMLGrammerParser.NOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(PlantUMLGrammerParser.SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SomethingsToEndNoteContext somethingsToEndNote() {
			return GetRuleContext<SomethingsToEndNoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDNOTE() { return GetToken(PlantUMLGrammerParser.ENDNOTE, 0); }
		public Note_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_note_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterNote_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitNote_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNote_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Note_exprContext note_expr() {
		Note_exprContext _localctx = new Note_exprContext(Context, State);
		EnterRule(_localctx, 64, RULE_note_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			Match(NOTE);
			State = 320;
			Match(SPACE);
			State = 321;
			somethingsToEndNote();
			State = 322;
			Match(ENDNOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SomethingsToEndNoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENDNOTE() { return GetTokens(PlantUMLGrammerParser.ENDNOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDNOTE(int i) {
			return GetToken(PlantUMLGrammerParser.ENDNOTE, i);
		}
		public SomethingsToEndNoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_somethingsToEndNote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterSomethingsToEndNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitSomethingsToEndNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSomethingsToEndNote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SomethingsToEndNoteContext somethingsToEndNote() {
		SomethingsToEndNoteContext _localctx = new SomethingsToEndNoteContext(Context, State);
		EnterRule(_localctx, 66, RULE_somethingsToEndNote);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 6597069766654L) != 0) {
				{
				{
				State = 324;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==ENDNOTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SomethingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Unicode() { return GetTokens(PlantUMLGrammerParser.Unicode); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unicode(int i) {
			return GetToken(PlantUMLGrammerParser.Unicode, i);
		}
		public SomethingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_somethings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterSomethings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitSomethings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSomethings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SomethingsContext somethings() {
		SomethingsContext _localctx = new SomethingsContext(Context, State);
		EnterRule(_localctx, 68, RULE_somethings);
		int _la;
		try {
			int _alt;
			State = 342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 330;
						MatchWildcard();
						}
						} 
					}
					State = 335;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,39,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Unicode) {
					{
					{
					State = 336;
					Match(Unicode);
					}
					}
					State = 341;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,42,345,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,1,0,1,0,5,
		0,73,8,0,10,0,12,0,76,9,0,1,0,3,0,79,8,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,3,
		1,88,8,1,1,1,1,1,5,1,92,8,1,10,1,12,1,95,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,3,2,108,8,2,1,3,1,3,1,3,1,3,3,3,114,8,3,1,3,3,3,117,
		8,3,1,3,1,3,3,3,121,8,3,1,3,3,3,124,8,3,1,4,1,4,5,4,128,8,4,10,4,12,4,
		131,9,4,1,4,1,4,1,5,3,5,136,8,5,1,5,1,5,3,5,140,8,5,1,5,1,5,1,5,3,5,145,
		8,5,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,3,7,155,8,7,1,7,3,7,158,8,7,1,7,1,
		7,3,7,162,8,7,1,7,3,7,165,8,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,
		11,5,11,177,8,11,10,11,12,11,180,9,11,1,12,1,12,1,12,1,12,1,12,1,12,3,
		12,188,8,12,1,12,3,12,191,8,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,3,12,202,8,12,1,12,3,12,205,8,12,1,12,1,12,1,12,3,12,210,8,12,3,12,
		212,8,12,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,3,15,222,8,15,1,15,1,
		15,1,15,1,15,3,15,228,8,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,236,8,15,
		1,15,1,15,1,15,1,15,3,15,242,8,15,1,15,1,15,1,15,1,15,3,15,248,8,15,1,
		15,1,15,3,15,252,8,15,1,15,1,15,3,15,256,8,15,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,3,16,265,8,16,1,16,3,16,268,8,16,1,16,1,16,3,16,272,8,16,1,16,
		3,16,275,8,16,3,16,277,8,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,
		21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
		28,1,28,1,29,1,29,1,30,1,30,1,30,1,30,1,30,3,30,310,8,30,1,31,1,31,1,31,
		1,31,1,31,1,31,3,31,318,8,31,1,32,1,32,1,32,1,32,1,32,1,33,5,33,326,8,
		33,10,33,12,33,329,9,33,1,34,5,34,332,8,34,10,34,12,34,335,9,34,1,34,5,
		34,338,8,34,10,34,12,34,341,9,34,3,34,343,8,34,1,34,1,333,0,35,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,60,62,64,66,68,0,6,1,0,1,2,1,0,38,38,1,0,9,10,1,0,11,18,2,0,6,6,
		18,20,1,0,41,41,361,0,70,1,0,0,0,2,83,1,0,0,0,4,107,1,0,0,0,6,109,1,0,
		0,0,8,125,1,0,0,0,10,135,1,0,0,0,12,148,1,0,0,0,14,150,1,0,0,0,16,166,
		1,0,0,0,18,170,1,0,0,0,20,172,1,0,0,0,22,178,1,0,0,0,24,211,1,0,0,0,26,
		213,1,0,0,0,28,217,1,0,0,0,30,255,1,0,0,0,32,257,1,0,0,0,34,278,1,0,0,
		0,36,280,1,0,0,0,38,282,1,0,0,0,40,284,1,0,0,0,42,286,1,0,0,0,44,288,1,
		0,0,0,46,290,1,0,0,0,48,292,1,0,0,0,50,294,1,0,0,0,52,296,1,0,0,0,54,298,
		1,0,0,0,56,300,1,0,0,0,58,302,1,0,0,0,60,309,1,0,0,0,62,317,1,0,0,0,64,
		319,1,0,0,0,66,327,1,0,0,0,68,342,1,0,0,0,70,74,5,33,0,0,71,73,3,4,2,0,
		72,71,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,75,1,0,0,0,75,78,1,0,0,0,
		76,74,1,0,0,0,77,79,5,37,0,0,78,77,1,0,0,0,78,79,1,0,0,0,79,80,1,0,0,0,
		80,81,5,34,0,0,81,82,5,0,0,1,82,1,1,0,0,0,83,84,5,24,0,0,84,85,5,37,0,
		0,85,87,3,58,29,0,86,88,5,37,0,0,87,86,1,0,0,0,87,88,1,0,0,0,88,89,1,0,
		0,0,89,93,5,35,0,0,90,92,3,4,2,0,91,90,1,0,0,0,92,95,1,0,0,0,93,91,1,0,
		0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,93,1,0,0,0,96,97,5,36,0,0,97,3,1,0,
		0,0,98,108,3,64,32,0,99,108,3,24,12,0,100,108,3,26,13,0,101,108,3,2,1,
		0,102,108,3,6,3,0,103,108,3,14,7,0,104,108,3,30,15,0,105,108,3,32,16,0,
		106,108,3,20,10,0,107,98,1,0,0,0,107,99,1,0,0,0,107,100,1,0,0,0,107,101,
		1,0,0,0,107,102,1,0,0,0,107,103,1,0,0,0,107,104,1,0,0,0,107,105,1,0,0,
		0,107,106,1,0,0,0,108,5,1,0,0,0,109,110,5,26,0,0,110,111,5,37,0,0,111,
		113,3,56,28,0,112,114,5,37,0,0,113,112,1,0,0,0,113,114,1,0,0,0,114,116,
		1,0,0,0,115,117,3,16,8,0,116,115,1,0,0,0,116,117,1,0,0,0,117,120,1,0,0,
		0,118,119,5,37,0,0,119,121,3,28,14,0,120,118,1,0,0,0,120,121,1,0,0,0,121,
		123,1,0,0,0,122,124,3,8,4,0,123,122,1,0,0,0,123,124,1,0,0,0,124,7,1,0,
		0,0,125,129,5,35,0,0,126,128,3,10,5,0,127,126,1,0,0,0,128,131,1,0,0,0,
		129,127,1,0,0,0,129,130,1,0,0,0,130,132,1,0,0,0,131,129,1,0,0,0,132,133,
		5,36,0,0,133,9,1,0,0,0,134,136,3,12,6,0,135,134,1,0,0,0,135,136,1,0,0,
		0,136,144,1,0,0,0,137,139,3,46,23,0,138,140,5,37,0,0,139,138,1,0,0,0,139,
		140,1,0,0,0,140,141,1,0,0,0,141,142,3,52,26,0,142,143,5,37,0,0,143,145,
		1,0,0,0,144,137,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,0,146,147,3,48,24,
		0,147,11,1,0,0,0,148,149,7,0,0,0,149,13,1,0,0,0,150,151,5,25,0,0,151,152,
		5,37,0,0,152,154,3,54,27,0,153,155,5,37,0,0,154,153,1,0,0,0,154,155,1,
		0,0,0,155,157,1,0,0,0,156,158,3,16,8,0,157,156,1,0,0,0,157,158,1,0,0,0,
		158,161,1,0,0,0,159,160,5,37,0,0,160,162,3,28,14,0,161,159,1,0,0,0,161,
		162,1,0,0,0,162,164,1,0,0,0,163,165,3,8,4,0,164,163,1,0,0,0,164,165,1,
		0,0,0,165,15,1,0,0,0,166,167,5,3,0,0,167,168,3,18,9,0,168,169,5,4,0,0,
		169,17,1,0,0,0,170,171,3,60,30,0,171,19,1,0,0,0,172,173,5,5,0,0,173,174,
		3,22,11,0,174,21,1,0,0,0,175,177,8,1,0,0,176,175,1,0,0,0,177,180,1,0,0,
		0,178,176,1,0,0,0,178,179,1,0,0,0,179,23,1,0,0,0,180,178,1,0,0,0,181,182,
		5,27,0,0,182,183,5,37,0,0,183,184,5,25,0,0,184,185,5,37,0,0,185,187,3,
		54,27,0,186,188,5,37,0,0,187,186,1,0,0,0,187,188,1,0,0,0,188,190,1,0,0,
		0,189,191,3,16,8,0,190,189,1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,
		193,5,37,0,0,193,212,1,0,0,0,194,195,5,27,0,0,195,196,5,37,0,0,196,212,
		3,54,27,0,197,198,5,27,0,0,198,199,5,37,0,0,199,201,3,54,27,0,200,202,
		5,37,0,0,201,200,1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,0,203,205,3,16,
		8,0,204,203,1,0,0,0,204,205,1,0,0,0,205,206,1,0,0,0,206,209,5,37,0,0,207,
		208,5,6,0,0,208,210,3,28,14,0,209,207,1,0,0,0,209,210,1,0,0,0,210,212,
		1,0,0,0,211,181,1,0,0,0,211,194,1,0,0,0,211,197,1,0,0,0,212,25,1,0,0,0,
		213,214,5,28,0,0,214,215,5,37,0,0,215,216,3,40,20,0,216,27,1,0,0,0,217,
		218,5,23,0,0,218,29,1,0,0,0,219,221,3,50,25,0,220,222,5,37,0,0,221,220,
		1,0,0,0,221,222,1,0,0,0,222,223,1,0,0,0,223,224,5,29,0,0,224,225,5,37,
		0,0,225,227,3,46,23,0,226,228,5,37,0,0,227,226,1,0,0,0,227,228,1,0,0,0,
		228,229,1,0,0,0,229,230,3,52,26,0,230,231,5,37,0,0,231,232,3,48,24,0,232,
		256,1,0,0,0,233,235,3,50,25,0,234,236,5,37,0,0,235,234,1,0,0,0,235,236,
		1,0,0,0,236,237,1,0,0,0,237,238,5,29,0,0,238,239,5,37,0,0,239,241,3,46,
		23,0,240,242,5,37,0,0,241,240,1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,
		243,244,3,52,26,0,244,245,5,37,0,0,245,247,3,48,24,0,246,248,5,37,0,0,
		247,246,1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,0,249,251,5,7,0,0,250,252,
		5,37,0,0,251,250,1,0,0,0,251,252,1,0,0,0,252,253,1,0,0,0,253,254,5,8,0,
		0,254,256,1,0,0,0,255,219,1,0,0,0,255,233,1,0,0,0,256,31,1,0,0,0,257,258,
		3,36,18,0,258,259,5,37,0,0,259,260,3,44,22,0,260,261,5,37,0,0,261,276,
		3,38,19,0,262,264,5,29,0,0,263,265,3,34,17,0,264,263,1,0,0,0,264,265,1,
		0,0,0,265,267,1,0,0,0,266,268,5,37,0,0,267,266,1,0,0,0,267,268,1,0,0,0,
		268,269,1,0,0,0,269,271,3,42,21,0,270,272,5,37,0,0,271,270,1,0,0,0,271,
		272,1,0,0,0,272,274,1,0,0,0,273,275,3,34,17,0,274,273,1,0,0,0,274,275,
		1,0,0,0,275,277,1,0,0,0,276,262,1,0,0,0,276,277,1,0,0,0,277,33,1,0,0,0,
		278,279,7,2,0,0,279,35,1,0,0,0,280,281,3,60,30,0,281,37,1,0,0,0,282,283,
		3,60,30,0,283,39,1,0,0,0,284,285,5,40,0,0,285,41,1,0,0,0,286,287,3,68,
		34,0,287,43,1,0,0,0,288,289,7,3,0,0,289,45,1,0,0,0,290,291,7,4,0,0,291,
		47,1,0,0,0,292,293,3,60,30,0,293,49,1,0,0,0,294,295,3,60,30,0,295,51,1,
		0,0,0,296,297,3,60,30,0,297,53,1,0,0,0,298,299,5,40,0,0,299,55,1,0,0,0,
		300,301,5,40,0,0,301,57,1,0,0,0,302,303,3,62,31,0,303,59,1,0,0,0,304,310,
		5,40,0,0,305,306,5,21,0,0,306,307,5,40,0,0,307,310,5,21,0,0,308,310,5,
		30,0,0,309,304,1,0,0,0,309,305,1,0,0,0,309,308,1,0,0,0,310,61,1,0,0,0,
		311,318,3,60,30,0,312,313,3,60,30,0,313,314,5,22,0,0,314,315,3,62,31,0,
		315,318,1,0,0,0,316,318,5,30,0,0,317,311,1,0,0,0,317,312,1,0,0,0,317,316,
		1,0,0,0,318,63,1,0,0,0,319,320,5,39,0,0,320,321,5,37,0,0,321,322,3,66,
		33,0,322,323,5,41,0,0,323,65,1,0,0,0,324,326,8,5,0,0,325,324,1,0,0,0,326,
		329,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,67,1,0,0,0,329,327,1,0,
		0,0,330,332,9,0,0,0,331,330,1,0,0,0,332,335,1,0,0,0,333,334,1,0,0,0,333,
		331,1,0,0,0,334,343,1,0,0,0,335,333,1,0,0,0,336,338,5,42,0,0,337,336,1,
		0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,343,1,0,0,0,
		341,339,1,0,0,0,342,333,1,0,0,0,342,339,1,0,0,0,343,69,1,0,0,0,42,74,78,
		87,93,107,113,116,120,123,129,135,139,144,154,157,161,164,178,187,190,
		201,204,209,211,221,227,235,241,247,251,255,264,267,271,274,276,309,317,
		327,333,339,342
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
