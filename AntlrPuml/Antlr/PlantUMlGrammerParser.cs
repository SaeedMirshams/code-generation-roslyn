//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PlantUMLGrammer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class PlantUMLGrammerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		Color=18, NAMESPACE=19, CLASS=20, ABSTRACT=21, INTERFACE=22, COLON=23, 
		STRING=24, SIGN=25, NUMBER=26, STARTUML=27, ENDUML=28, AQOLADBAZ=29, AQOLADBASTE=30, 
		SPACE=31, NewLine=32, NOTE=33, Identifier=34, ENDNOTE=35, Unicode=36;
	public const int
		RULE_file = 0, RULE_namespace_def = 1, RULE_type_definition = 2, RULE_class_def = 3, 
		RULE_abstractclass_def = 4, RULE_interface_def = 5, RULE_color = 6, RULE_extrafield = 7, 
		RULE_relation = 8, RULE_direction = 9, RULE_from = 10, RULE_to = 11, RULE_interface_name = 12, 
		RULE_linktext = 13, RULE_relationType = 14, RULE_accessor = 15, RULE_fieldName = 16, 
		RULE_ownerClass = 17, RULE_fieldType = 18, RULE_class_name = 19, RULE_namespace_name = 20, 
		RULE_identifier = 21, RULE_dotIdentifier = 22, RULE_note_expr = 23, RULE_somethingsToEndNote = 24, 
		RULE_somethings = 25;
	public static readonly string[] ruleNames = {
		"file", "namespace_def", "type_definition", "class_def", "abstractclass_def", 
		"interface_def", "color", "extrafield", "relation", "direction", "from", 
		"to", "interface_name", "linktext", "relationType", "accessor", "fieldName", 
		"ownerClass", "fieldType", "class_name", "namespace_name", "identifier", 
		"dotIdentifier", "note_expr", "somethingsToEndNote", "somethings"
	};

	private static readonly string[] _LiteralNames = {
		null, "'#'", "'('", "')'", "'<'", "'>'", "'--|>'", "'--'", "'<|--'", "'-->'", 
		"'<--'", "'*--'", "'*-'", "'-'", "'+'", "'~'", "'\"'", "'.'", null, null, 
		"'class'", "'abstract'", "'interface'", "':'", null, null, null, "'@startuml'", 
		"'@enduml'", "'{'", "'}'", null, null, "'note'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "Color", "NAMESPACE", "CLASS", "ABSTRACT", 
		"INTERFACE", "COLON", "STRING", "SIGN", "NUMBER", "STARTUML", "ENDUML", 
		"AQOLADBAZ", "AQOLADBASTE", "SPACE", "NewLine", "NOTE", "Identifier", 
		"ENDNOTE", "Unicode"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PlantUMLGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PlantUMLGrammerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PlantUMLGrammerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PlantUMLGrammerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTUML() { return GetToken(PlantUMLGrammerParser.STARTUML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDUML() { return GetToken(PlantUMLGrammerParser.ENDUML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PlantUMLGrammerParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext[] type_definition() {
			return GetRuleContexts<Type_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext type_definition(int i) {
			return GetRuleContext<Type_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(PlantUMLGrammerParser.SPACE, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(STARTUML);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 25794510848L) != 0) {
				{
				{
				State = 53;
				type_definition();
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACE) {
				{
				State = 59;
				Match(SPACE);
				}
			}

			State = 62;
			Match(ENDUML);
			State = 63;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(PlantUMLGrammerParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name() {
			return GetRuleContext<Namespace_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AQOLADBAZ() { return GetToken(PlantUMLGrammerParser.AQOLADBAZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AQOLADBASTE() { return GetToken(PlantUMLGrammerParser.AQOLADBASTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext[] type_definition() {
			return GetRuleContexts<Type_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext type_definition(int i) {
			return GetRuleContext<Type_definitionContext>(i);
		}
		public Namespace_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterNamespace_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitNamespace_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_defContext namespace_def() {
		Namespace_defContext _localctx = new Namespace_defContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(NAMESPACE);
			State = 66;
			Match(SPACE);
			State = 67;
			namespace_name();
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACE) {
				{
				State = 68;
				Match(SPACE);
				}
			}

			State = 71;
			Match(AQOLADBAZ);
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 25794510848L) != 0) {
				{
				{
				State = 72;
				type_definition();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78;
			Match(AQOLADBASTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Note_exprContext note_expr() {
			return GetRuleContext<Note_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Abstractclass_defContext abstractclass_def() {
			return GetRuleContext<Abstractclass_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_defContext interface_def() {
			return GetRuleContext<Interface_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_defContext namespace_def() {
			return GetRuleContext<Namespace_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_defContext class_def() {
			return GetRuleContext<Class_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtrafieldContext extrafield() {
			return GetRuleContext<ExtrafieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation() {
			return GetRuleContext<RelationContext>(0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_definitionContext type_definition() {
		Type_definitionContext _localctx = new Type_definitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_type_definition);
		try {
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				note_expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81;
				abstractclass_def();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 82;
				interface_def();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 83;
				namespace_def();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 84;
				class_def();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 85;
				extrafield();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 86;
				relation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PlantUMLGrammerParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		public Class_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterClass_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitClass_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_defContext class_def() {
		Class_defContext _localctx = new Class_defContext(Context, State);
		EnterRule(_localctx, 6, RULE_class_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(CLASS);
			State = 90;
			Match(SPACE);
			State = 91;
			class_name();
			State = 94;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 92;
				Match(SPACE);
				State = 93;
				color();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Abstractclass_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(PlantUMLGrammerParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PlantUMLGrammerParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		public Abstractclass_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractclass_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterAbstractclass_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitAbstractclass_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbstractclass_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Abstractclass_defContext abstractclass_def() {
		Abstractclass_defContext _localctx = new Abstractclass_defContext(Context, State);
		EnterRule(_localctx, 8, RULE_abstractclass_def);
		int _la;
		try {
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				Match(ABSTRACT);
				State = 97;
				Match(SPACE);
				State = 98;
				Match(CLASS);
				State = 99;
				Match(SPACE);
				State = 100;
				class_name();
				State = 101;
				Match(SPACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 103;
				Match(ABSTRACT);
				State = 104;
				Match(SPACE);
				State = 105;
				class_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106;
				Match(ABSTRACT);
				State = 107;
				Match(SPACE);
				State = 108;
				class_name();
				State = 109;
				Match(SPACE);
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 110;
					Match(T__0);
					State = 111;
					color();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(PlantUMLGrammerParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(PlantUMLGrammerParser.SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_nameContext interface_name() {
			return GetRuleContext<Interface_nameContext>(0);
		}
		public Interface_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterInterface_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitInterface_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_defContext interface_def() {
		Interface_defContext _localctx = new Interface_defContext(Context, State);
		EnterRule(_localctx, 10, RULE_interface_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(INTERFACE);
			State = 117;
			Match(SPACE);
			State = 118;
			interface_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Color() { return GetToken(PlantUMLGrammerParser.Color, 0); }
		public ColorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_color; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterColor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitColor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColorContext color() {
		ColorContext _localctx = new ColorContext(Context, State);
		EnterRule(_localctx, 12, RULE_color);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(Color);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtrafieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OwnerClassContext ownerClass() {
			return GetRuleContext<OwnerClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PlantUMLGrammerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext accessor() {
			return GetRuleContext<AccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldTypeContext fieldType() {
			return GetRuleContext<FieldTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		public ExtrafieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extrafield; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterExtrafield(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitExtrafield(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtrafield(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtrafieldContext extrafield() {
		ExtrafieldContext _localctx = new ExtrafieldContext(Context, State);
		EnterRule(_localctx, 14, RULE_extrafield);
		int _la;
		try {
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				ownerClass();
				State = 124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 123;
					Match(SPACE);
					}
				}

				State = 126;
				Match(COLON);
				State = 127;
				Match(SPACE);
				State = 128;
				accessor();
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 129;
					Match(SPACE);
					}
				}

				State = 132;
				fieldType();
				State = 133;
				Match(SPACE);
				State = 134;
				fieldName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 136;
				ownerClass();
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 137;
					Match(SPACE);
					}
				}

				State = 140;
				Match(COLON);
				State = 141;
				Match(SPACE);
				State = 142;
				accessor();
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 143;
					Match(SPACE);
					}
				}

				State = 146;
				fieldType();
				State = 147;
				Match(SPACE);
				State = 148;
				fieldName();
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 149;
					Match(SPACE);
					}
				}

				State = 152;
				Match(T__1);
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 153;
					Match(SPACE);
					}
				}

				State = 156;
				Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FromContext from() {
			return GetRuleContext<FromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationTypeContext relationType() {
			return GetRuleContext<RelationTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToContext to() {
			return GetRuleContext<ToContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PlantUMLGrammerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinktextContext linktext() {
			return GetRuleContext<LinktextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext[] direction() {
			return GetRuleContexts<DirectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction(int i) {
			return GetRuleContext<DirectionContext>(i);
		}
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 16, RULE_relation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			from();
			State = 161;
			Match(SPACE);
			State = 162;
			relationType();
			State = 163;
			Match(SPACE);
			State = 164;
			to();
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 165;
				Match(COLON);
				State = 167;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
				case 1:
					{
					State = 166;
					direction();
					}
					break;
				}
				State = 170;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 169;
					Match(SPACE);
					}
					break;
				}
				State = 172;
				linktext();
				State = 174;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
				case 1:
					{
					State = 173;
					Match(SPACE);
					}
					break;
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3 || _la==T__4) {
					{
					State = 176;
					direction();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 18, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			_la = TokenStream.LA(1);
			if ( !(_la==T__3 || _la==T__4) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromContext from() {
		FromContext _localctx = new FromContext(Context, State);
		EnterRule(_localctx, 20, RULE_from);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ToContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_to; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterTo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitTo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToContext to() {
		ToContext _localctx = new ToContext(Context, State);
		EnterRule(_localctx, 22, RULE_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlantUMLGrammerParser.Identifier, 0); }
		public Interface_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterInterface_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitInterface_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_nameContext interface_name() {
		Interface_nameContext _localctx = new Interface_nameContext(Context, State);
		EnterRule(_localctx, 24, RULE_interface_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinktextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SomethingsContext somethings() {
			return GetRuleContext<SomethingsContext>(0);
		}
		public LinktextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linktext; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterLinktext(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitLinktext(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinktext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinktextContext linktext() {
		LinktextContext _localctx = new LinktextContext(Context, State);
		EnterRule(_localctx, 26, RULE_linktext);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			somethings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationTypeContext : ParserRuleContext {
		public RelationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterRelationType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitRelationType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationTypeContext relationType() {
		RelationTypeContext _localctx = new RelationTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_relationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 16320L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorContext : ParserRuleContext {
		public AccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorContext accessor() {
		AccessorContext _localctx = new AccessorContext(Context, State);
		EnterRule(_localctx, 30, RULE_accessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 57346L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterFieldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitFieldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(Context, State);
		EnterRule(_localctx, 32, RULE_fieldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public OwnerClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ownerClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterOwnerClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitOwnerClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnerClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OwnerClassContext ownerClass() {
		OwnerClassContext _localctx = new OwnerClassContext(Context, State);
		EnterRule(_localctx, 34, RULE_ownerClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterFieldType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitFieldType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldTypeContext fieldType() {
		FieldTypeContext _localctx = new FieldTypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_fieldType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlantUMLGrammerParser.Identifier, 0); }
		public Class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterClass_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitClass_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_nameContext class_name() {
		Class_nameContext _localctx = new Class_nameContext(Context, State);
		EnterRule(_localctx, 38, RULE_class_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public Namespace_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterNamespace_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitNamespace_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_nameContext namespace_name() {
		Namespace_nameContext _localctx = new Namespace_nameContext(Context, State);
		EnterRule(_localctx, 40, RULE_namespace_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			dotIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlantUMLGrammerParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PlantUMLGrammerParser.STRING, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_identifier);
		try {
			State = 210;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				Match(Identifier);
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 206;
				Match(T__15);
				State = 207;
				Match(Identifier);
				State = 208;
				Match(T__15);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 209;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PlantUMLGrammerParser.STRING, 0); }
		public DotIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterDotIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitDotIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotIdentifierContext dotIdentifier() {
		DotIdentifierContext _localctx = new DotIdentifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_dotIdentifier);
		try {
			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				identifier();
				State = 214;
				Match(T__16);
				State = 215;
				dotIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 217;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Note_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTE() { return GetToken(PlantUMLGrammerParser.NOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(PlantUMLGrammerParser.SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SomethingsToEndNoteContext somethingsToEndNote() {
			return GetRuleContext<SomethingsToEndNoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDNOTE() { return GetToken(PlantUMLGrammerParser.ENDNOTE, 0); }
		public Note_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_note_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterNote_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitNote_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNote_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Note_exprContext note_expr() {
		Note_exprContext _localctx = new Note_exprContext(Context, State);
		EnterRule(_localctx, 46, RULE_note_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(NOTE);
			State = 221;
			Match(SPACE);
			State = 222;
			somethingsToEndNote();
			State = 223;
			Match(ENDNOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SomethingsToEndNoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENDNOTE() { return GetTokens(PlantUMLGrammerParser.ENDNOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDNOTE(int i) {
			return GetToken(PlantUMLGrammerParser.ENDNOTE, i);
		}
		public SomethingsToEndNoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_somethingsToEndNote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterSomethingsToEndNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitSomethingsToEndNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSomethingsToEndNote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SomethingsToEndNoteContext somethingsToEndNote() {
		SomethingsToEndNoteContext _localctx = new SomethingsToEndNoteContext(Context, State);
		EnterRule(_localctx, 48, RULE_somethingsToEndNote);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 103079215102L) != 0) {
				{
				{
				State = 225;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==ENDNOTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SomethingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Unicode() { return GetTokens(PlantUMLGrammerParser.Unicode); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unicode(int i) {
			return GetToken(PlantUMLGrammerParser.Unicode, i);
		}
		public SomethingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_somethings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterSomethings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitSomethings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSomethings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SomethingsContext somethings() {
		SomethingsContext _localctx = new SomethingsContext(Context, State);
		EnterRule(_localctx, 50, RULE_somethings);
		int _la;
		try {
			int _alt;
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 231;
						MatchWildcard();
						}
						} 
					}
					State = 236;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Unicode) {
					{
					{
					State = 237;
					Match(Unicode);
					}
					}
					State = 242;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,36,246,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,5,0,55,8,0,10,0,12,0,58,
		9,0,1,0,3,0,61,8,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,70,8,1,1,1,1,1,5,1,
		74,8,1,10,1,12,1,77,9,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,88,8,2,
		1,3,1,3,1,3,1,3,1,3,3,3,95,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,3,4,113,8,4,3,4,115,8,4,1,5,1,5,1,5,1,5,1,6,1,
		6,1,7,1,7,3,7,125,8,7,1,7,1,7,1,7,1,7,3,7,131,8,7,1,7,1,7,1,7,1,7,1,7,
		1,7,3,7,139,8,7,1,7,1,7,1,7,1,7,3,7,145,8,7,1,7,1,7,1,7,1,7,3,7,151,8,
		7,1,7,1,7,3,7,155,8,7,1,7,1,7,3,7,159,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
		3,8,168,8,8,1,8,3,8,171,8,8,1,8,1,8,3,8,175,8,8,1,8,3,8,178,8,8,3,8,180,
		8,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,
		1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,21,
		1,21,3,21,211,8,21,1,22,1,22,1,22,1,22,1,22,1,22,3,22,219,8,22,1,23,1,
		23,1,23,1,23,1,23,1,24,5,24,227,8,24,10,24,12,24,230,9,24,1,25,5,25,233,
		8,25,10,25,12,25,236,9,25,1,25,5,25,239,8,25,10,25,12,25,242,9,25,3,25,
		244,8,25,1,25,1,234,0,26,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,0,4,1,0,4,5,1,0,6,13,2,0,1,1,13,15,1,0,35,35,
		253,0,52,1,0,0,0,2,65,1,0,0,0,4,87,1,0,0,0,6,89,1,0,0,0,8,114,1,0,0,0,
		10,116,1,0,0,0,12,120,1,0,0,0,14,158,1,0,0,0,16,160,1,0,0,0,18,181,1,0,
		0,0,20,183,1,0,0,0,22,185,1,0,0,0,24,187,1,0,0,0,26,189,1,0,0,0,28,191,
		1,0,0,0,30,193,1,0,0,0,32,195,1,0,0,0,34,197,1,0,0,0,36,199,1,0,0,0,38,
		201,1,0,0,0,40,203,1,0,0,0,42,210,1,0,0,0,44,218,1,0,0,0,46,220,1,0,0,
		0,48,228,1,0,0,0,50,243,1,0,0,0,52,56,5,27,0,0,53,55,3,4,2,0,54,53,1,0,
		0,0,55,58,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,57,60,1,0,0,0,58,56,1,0,
		0,0,59,61,5,31,0,0,60,59,1,0,0,0,60,61,1,0,0,0,61,62,1,0,0,0,62,63,5,28,
		0,0,63,64,5,0,0,1,64,1,1,0,0,0,65,66,5,19,0,0,66,67,5,31,0,0,67,69,3,40,
		20,0,68,70,5,31,0,0,69,68,1,0,0,0,69,70,1,0,0,0,70,71,1,0,0,0,71,75,5,
		29,0,0,72,74,3,4,2,0,73,72,1,0,0,0,74,77,1,0,0,0,75,73,1,0,0,0,75,76,1,
		0,0,0,76,78,1,0,0,0,77,75,1,0,0,0,78,79,5,30,0,0,79,3,1,0,0,0,80,88,3,
		46,23,0,81,88,3,8,4,0,82,88,3,10,5,0,83,88,3,2,1,0,84,88,3,6,3,0,85,88,
		3,14,7,0,86,88,3,16,8,0,87,80,1,0,0,0,87,81,1,0,0,0,87,82,1,0,0,0,87,83,
		1,0,0,0,87,84,1,0,0,0,87,85,1,0,0,0,87,86,1,0,0,0,88,5,1,0,0,0,89,90,5,
		20,0,0,90,91,5,31,0,0,91,94,3,38,19,0,92,93,5,31,0,0,93,95,3,12,6,0,94,
		92,1,0,0,0,94,95,1,0,0,0,95,7,1,0,0,0,96,97,5,21,0,0,97,98,5,31,0,0,98,
		99,5,20,0,0,99,100,5,31,0,0,100,101,3,38,19,0,101,102,5,31,0,0,102,115,
		1,0,0,0,103,104,5,21,0,0,104,105,5,31,0,0,105,115,3,38,19,0,106,107,5,
		21,0,0,107,108,5,31,0,0,108,109,3,38,19,0,109,112,5,31,0,0,110,111,5,1,
		0,0,111,113,3,12,6,0,112,110,1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,
		96,1,0,0,0,114,103,1,0,0,0,114,106,1,0,0,0,115,9,1,0,0,0,116,117,5,22,
		0,0,117,118,5,31,0,0,118,119,3,24,12,0,119,11,1,0,0,0,120,121,5,18,0,0,
		121,13,1,0,0,0,122,124,3,34,17,0,123,125,5,31,0,0,124,123,1,0,0,0,124,
		125,1,0,0,0,125,126,1,0,0,0,126,127,5,23,0,0,127,128,5,31,0,0,128,130,
		3,30,15,0,129,131,5,31,0,0,130,129,1,0,0,0,130,131,1,0,0,0,131,132,1,0,
		0,0,132,133,3,36,18,0,133,134,5,31,0,0,134,135,3,32,16,0,135,159,1,0,0,
		0,136,138,3,34,17,0,137,139,5,31,0,0,138,137,1,0,0,0,138,139,1,0,0,0,139,
		140,1,0,0,0,140,141,5,23,0,0,141,142,5,31,0,0,142,144,3,30,15,0,143,145,
		5,31,0,0,144,143,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,0,146,147,3,36,
		18,0,147,148,5,31,0,0,148,150,3,32,16,0,149,151,5,31,0,0,150,149,1,0,0,
		0,150,151,1,0,0,0,151,152,1,0,0,0,152,154,5,2,0,0,153,155,5,31,0,0,154,
		153,1,0,0,0,154,155,1,0,0,0,155,156,1,0,0,0,156,157,5,3,0,0,157,159,1,
		0,0,0,158,122,1,0,0,0,158,136,1,0,0,0,159,15,1,0,0,0,160,161,3,20,10,0,
		161,162,5,31,0,0,162,163,3,28,14,0,163,164,5,31,0,0,164,179,3,22,11,0,
		165,167,5,23,0,0,166,168,3,18,9,0,167,166,1,0,0,0,167,168,1,0,0,0,168,
		170,1,0,0,0,169,171,5,31,0,0,170,169,1,0,0,0,170,171,1,0,0,0,171,172,1,
		0,0,0,172,174,3,26,13,0,173,175,5,31,0,0,174,173,1,0,0,0,174,175,1,0,0,
		0,175,177,1,0,0,0,176,178,3,18,9,0,177,176,1,0,0,0,177,178,1,0,0,0,178,
		180,1,0,0,0,179,165,1,0,0,0,179,180,1,0,0,0,180,17,1,0,0,0,181,182,7,0,
		0,0,182,19,1,0,0,0,183,184,3,42,21,0,184,21,1,0,0,0,185,186,3,42,21,0,
		186,23,1,0,0,0,187,188,5,34,0,0,188,25,1,0,0,0,189,190,3,50,25,0,190,27,
		1,0,0,0,191,192,7,1,0,0,192,29,1,0,0,0,193,194,7,2,0,0,194,31,1,0,0,0,
		195,196,3,42,21,0,196,33,1,0,0,0,197,198,3,42,21,0,198,35,1,0,0,0,199,
		200,3,42,21,0,200,37,1,0,0,0,201,202,5,34,0,0,202,39,1,0,0,0,203,204,3,
		44,22,0,204,41,1,0,0,0,205,211,5,34,0,0,206,207,5,16,0,0,207,208,5,34,
		0,0,208,211,5,16,0,0,209,211,5,24,0,0,210,205,1,0,0,0,210,206,1,0,0,0,
		210,209,1,0,0,0,211,43,1,0,0,0,212,219,3,42,21,0,213,214,3,42,21,0,214,
		215,5,17,0,0,215,216,3,44,22,0,216,219,1,0,0,0,217,219,5,24,0,0,218,212,
		1,0,0,0,218,213,1,0,0,0,218,217,1,0,0,0,219,45,1,0,0,0,220,221,5,33,0,
		0,221,222,5,31,0,0,222,223,3,48,24,0,223,224,5,35,0,0,224,47,1,0,0,0,225,
		227,8,3,0,0,226,225,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,
		0,0,0,229,49,1,0,0,0,230,228,1,0,0,0,231,233,9,0,0,0,232,231,1,0,0,0,233,
		236,1,0,0,0,234,235,1,0,0,0,234,232,1,0,0,0,235,244,1,0,0,0,236,234,1,
		0,0,0,237,239,5,36,0,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,
		240,241,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,243,234,1,0,0,0,243,240,
		1,0,0,0,244,51,1,0,0,0,26,56,60,69,75,87,94,112,114,124,130,138,144,150,
		154,158,167,170,174,177,179,210,218,228,234,240,243
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
