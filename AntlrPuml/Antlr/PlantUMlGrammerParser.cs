//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PlantUMLGrammer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class PlantUMLGrammerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, NAMESPACE=24, 
		CLASS=25, ENUM=26, ABSTRACT=27, INTERFACE=28, COLON=29, STRING=30, SIGN=31, 
		NUMBER=32, STARTUML=33, ENDUML=34, AQOLADBAZ=35, AQOLADBASTE=36, SPACE=37, 
		Singleline_comment=38, NewLine=39, NOTE=40, Identifier=41, ENDNOTE=42, 
		Unicode=43, Color=44;
	public const int
		RULE_file = 0, RULE_namespace_def = 1, RULE_type_definition = 2, RULE_enum_def = 3, 
		RULE_field_def_block = 4, RULE_field_def = 5, RULE_enum_field_def_block = 6, 
		RULE_enum_field_def = 7, RULE_fieldstreotype = 8, RULE_method_field = 9, 
		RULE_class_def = 10, RULE_streotype_def = 11, RULE_streotypename = 12, 
		RULE_generic_name = 13, RULE_multi_line_comment = 14, RULE_comment = 15, 
		RULE_interface_def = 16, RULE_color = 17, RULE_extrafield = 18, RULE_relation = 19, 
		RULE_direction = 20, RULE_multiplicity = 21, RULE_from = 22, RULE_to = 23, 
		RULE_interface_name = 24, RULE_linktext = 25, RULE_relationType = 26, 
		RULE_accessor = 27, RULE_fieldName = 28, RULE_methodName = 29, RULE_ownerClass = 30, 
		RULE_fieldType = 31, RULE_class_name = 32, RULE_enum_name = 33, RULE_namespace_name = 34, 
		RULE_identifier = 35, RULE_dotIdentifier = 36, RULE_note_expr = 37, RULE_somethingsToEndNote = 38, 
		RULE_somethings = 39;
	public static readonly string[] ruleNames = {
		"file", "namespace_def", "type_definition", "enum_def", "field_def_block", 
		"field_def", "enum_field_def_block", "enum_field_def", "fieldstreotype", 
		"method_field", "class_def", "streotype_def", "streotypename", "generic_name", 
		"multi_line_comment", "comment", "interface_def", "color", "extrafield", 
		"relation", "direction", "multiplicity", "from", "to", "interface_name", 
		"linktext", "relationType", "accessor", "fieldName", "methodName", "ownerClass", 
		"fieldType", "class_name", "enum_name", "namespace_name", "identifier", 
		"dotIdentifier", "note_expr", "somethingsToEndNote", "somethings"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<<'", "'>>'", "'{method}'", "'{field}'", "'<'", "'>'", "'\\''", 
		"''\\'", "'('", "')'", "'--|>'", "'--'", "'<|--'", "'-->'", "'<--'", "'*--'", 
		"'*-'", "'-'", "'+'", "'#'", "'~'", "'\"'", "'.'", null, "'class'", "'enum'", 
		"'abstract'", "'interface'", "':'", null, null, null, "'@startuml'", "'@enduml'", 
		"'{'", "'}'", null, null, null, "'note'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"NAMESPACE", "CLASS", "ENUM", "ABSTRACT", "INTERFACE", "COLON", "STRING", 
		"SIGN", "NUMBER", "STARTUML", "ENDUML", "AQOLADBAZ", "AQOLADBASTE", "SPACE", 
		"Singleline_comment", "NewLine", "NOTE", "Identifier", "ENDNOTE", "Unicode", 
		"Color"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PlantUMLGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static PlantUMLGrammerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public PlantUMLGrammerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PlantUMLGrammerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTUML() { return GetToken(PlantUMLGrammerParser.STARTUML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDUML() { return GetToken(PlantUMLGrammerParser.ENDUML, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(PlantUMLGrammerParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_defContext[] namespace_def() {
			return GetRuleContexts<Namespace_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_defContext namespace_def(int i) {
			return GetRuleContext<Namespace_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext[] type_definition() {
			return GetRuleContexts<Type_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext type_definition(int i) {
			return GetRuleContext<Type_definitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(PlantUMLGrammerParser.SPACE, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(STARTUML);
			State = 85;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 83;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NAMESPACE:
						{
						State = 81;
						namespace_def();
						}
						break;
					case T__21:
					case CLASS:
					case ENUM:
					case ABSTRACT:
					case INTERFACE:
					case STRING:
					case SPACE:
					case Singleline_comment:
					case NOTE:
					case Identifier:
						{
						State = 82;
						type_definition();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 87;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACE) {
				{
				State = 88;
				Match(SPACE);
				}
			}

			State = 91;
			Match(ENDUML);
			State = 92;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMESPACE() { return GetToken(PlantUMLGrammerParser.NAMESPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_nameContext namespace_name() {
			return GetRuleContext<Namespace_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AQOLADBAZ() { return GetToken(PlantUMLGrammerParser.AQOLADBAZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AQOLADBASTE() { return GetToken(PlantUMLGrammerParser.AQOLADBASTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext[] type_definition() {
			return GetRuleContexts<Type_definitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_definitionContext type_definition(int i) {
			return GetRuleContext<Type_definitionContext>(i);
		}
		public Namespace_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterNamespace_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitNamespace_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_defContext namespace_def() {
		Namespace_defContext _localctx = new Namespace_defContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespace_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			Match(NAMESPACE);
			State = 95;
			Match(SPACE);
			State = 96;
			namespace_name();
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACE) {
				{
				State = 97;
				Match(SPACE);
				}
			}

			State = 100;
			Match(AQOLADBAZ);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 3712432996352L) != 0) {
				{
				{
				State = 101;
				type_definition();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107;
			Match(AQOLADBASTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Note_exprContext note_expr() {
			return GetRuleContext<Note_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_defContext enum_def() {
			return GetRuleContext<Enum_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_defContext class_def() {
			return GetRuleContext<Class_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtrafieldContext extrafield() {
			return GetRuleContext<ExtrafieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationContext relation() {
			return GetRuleContext<RelationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Singleline_comment() { return GetToken(PlantUMLGrammerParser.Singleline_comment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitType_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_definitionContext type_definition() {
		Type_definitionContext _localctx = new Type_definitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_type_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SPACE) {
				{
				{
				State = 109;
				Match(SPACE);
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 121;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 115;
				note_expr();
				}
				break;
			case 2:
				{
				State = 116;
				enum_def();
				}
				break;
			case 3:
				{
				State = 117;
				class_def();
				}
				break;
			case 4:
				{
				State = 118;
				extrafield();
				}
				break;
			case 5:
				{
				State = 119;
				relation();
				}
				break;
			case 6:
				{
				State = 120;
				Match(Singleline_comment);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(PlantUMLGrammerParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_nameContext enum_name() {
			return GetRuleContext<Enum_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Streotype_defContext streotype_def() {
			return GetRuleContext<Streotype_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_field_def_blockContext enum_field_def_block() {
			return GetRuleContext<Enum_field_def_blockContext>(0);
		}
		public Enum_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterEnum_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitEnum_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_defContext enum_def() {
		Enum_defContext _localctx = new Enum_defContext(Context, State);
		EnterRule(_localctx, 6, RULE_enum_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(ENUM);
			State = 124;
			Match(SPACE);
			State = 125;
			enum_name();
			State = 127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 126;
				Match(SPACE);
				}
				break;
			}
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 129;
				streotype_def();
				}
			}

			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 132;
				Match(SPACE);
				State = 133;
				color();
				}
				break;
			}
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AQOLADBAZ) {
				{
				State = 136;
				enum_field_def_block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_def_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AQOLADBAZ() { return GetToken(PlantUMLGrammerParser.AQOLADBAZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AQOLADBASTE() { return GetToken(PlantUMLGrammerParser.AQOLADBASTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_defContext[] field_def() {
			return GetRuleContexts<Field_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_defContext field_def(int i) {
			return GetRuleContext<Field_defContext>(i);
		}
		public Field_def_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_def_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterField_def_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitField_def_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_def_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_def_blockContext field_def_block() {
		Field_def_blockContext _localctx = new Field_def_blockContext(Context, State);
		EnterRule(_localctx, 8, RULE_field_def_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			Match(AQOLADBAZ);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 2200105123866L) != 0) {
				{
				{
				State = 140;
				field_def();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 146;
			Match(AQOLADBASTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_fieldContext method_field() {
			return GetRuleContext<Method_fieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldstreotypeContext[] fieldstreotype() {
			return GetRuleContexts<FieldstreotypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldstreotypeContext fieldstreotype(int i) {
			return GetRuleContext<FieldstreotypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext accessor() {
			return GetRuleContext<AccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldTypeContext fieldType() {
			return GetRuleContext<FieldTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		public Field_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterField_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitField_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_defContext field_def() {
		Field_defContext _localctx = new Field_defContext(Context, State);
		EnterRule(_localctx, 10, RULE_field_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2 || _la==T__3) {
				{
				State = 148;
				method_field();
				}
			}

			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 151;
				fieldstreotype();
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 3932160L) != 0) {
				{
				State = 157;
				accessor();
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 158;
					Match(SPACE);
					}
				}

				State = 161;
				fieldType();
				State = 162;
				Match(SPACE);
				}
			}

			State = 166;
			fieldName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_field_def_blockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AQOLADBAZ() { return GetToken(PlantUMLGrammerParser.AQOLADBAZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AQOLADBASTE() { return GetToken(PlantUMLGrammerParser.AQOLADBASTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Enum_field_defContext[] enum_field_def() {
			return GetRuleContexts<Enum_field_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Enum_field_defContext enum_field_def(int i) {
			return GetRuleContext<Enum_field_defContext>(i);
		}
		public Enum_field_def_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_field_def_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterEnum_field_def_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitEnum_field_def_block(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_field_def_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_field_def_blockContext enum_field_def_block() {
		Enum_field_def_blockContext _localctx = new Enum_field_def_blockContext(Context, State);
		EnterRule(_localctx, 12, RULE_enum_field_def_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(AQOLADBAZ);
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 2337544077338L) != 0) {
				{
				{
				State = 169;
				enum_field_def();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 175;
			Match(AQOLADBASTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_field_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Method_fieldContext method_field() {
			return GetRuleContext<Method_fieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldstreotypeContext[] fieldstreotype() {
			return GetRuleContexts<FieldstreotypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldstreotypeContext fieldstreotype(int i) {
			return GetRuleContext<FieldstreotypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext accessor() {
			return GetRuleContext<AccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldTypeContext fieldType() {
			return GetRuleContext<FieldTypeContext>(0);
		}
		public Enum_field_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_field_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterEnum_field_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitEnum_field_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_field_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_field_defContext enum_field_def() {
		Enum_field_defContext _localctx = new Enum_field_defContext(Context, State);
		EnterRule(_localctx, 14, RULE_enum_field_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SPACE) {
				{
				{
				State = 177;
				Match(SPACE);
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2 || _la==T__3) {
				{
				State = 183;
				method_field();
				}
			}

			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 186;
				fieldstreotype();
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 3932160L) != 0) {
				{
				State = 192;
				accessor();
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 193;
					Match(SPACE);
					}
				}

				State = 196;
				fieldType();
				State = 197;
				Match(SPACE);
				}
			}

			State = 201;
			fieldName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldstreotypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StreotypenameContext streotypename() {
			return GetRuleContext<StreotypenameContext>(0);
		}
		public FieldstreotypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldstreotype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterFieldstreotype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitFieldstreotype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldstreotype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldstreotypeContext fieldstreotype() {
		FieldstreotypeContext _localctx = new FieldstreotypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_fieldstreotype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(T__0);
			State = 204;
			streotypename();
			State = 205;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_fieldContext : ParserRuleContext {
		public Method_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterMethod_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitMethod_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_fieldContext method_field() {
		Method_fieldContext _localctx = new Method_fieldContext(Context, State);
		EnterRule(_localctx, 18, RULE_method_field);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS() { return GetToken(PlantUMLGrammerParser.CLASS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ABSTRACT() { return GetToken(PlantUMLGrammerParser.ABSTRACT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Streotype_defContext[] streotype_def() {
			return GetRuleContexts<Streotype_defContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Streotype_defContext streotype_def(int i) {
			return GetRuleContext<Streotype_defContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColorContext color() {
			return GetRuleContext<ColorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_def_blockContext field_def_block() {
			return GetRuleContext<Field_def_blockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Interface_defContext interface_def() {
			return GetRuleContext<Interface_defContext>(0);
		}
		public Class_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterClass_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitClass_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_defContext class_def() {
		Class_defContext _localctx = new Class_defContext(Context, State);
		EnterRule(_localctx, 20, RULE_class_def);
		int _la;
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
			case ABSTRACT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 210;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ABSTRACT) {
					{
					State = 209;
					Match(ABSTRACT);
					}
				}

				State = 212;
				Match(CLASS);
				State = 213;
				Match(SPACE);
				State = 214;
				class_name();
				State = 216;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
				case 1:
					{
					State = 215;
					Match(SPACE);
					}
					break;
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 218;
					streotype_def();
					}
					}
					State = 223;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 226;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 224;
					Match(SPACE);
					State = 225;
					color();
					}
					break;
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AQOLADBAZ) {
					{
					State = 228;
					field_def_block();
					}
				}

				}
				break;
			case INTERFACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 231;
				interface_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Streotype_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StreotypenameContext streotypename() {
			return GetRuleContext<StreotypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Generic_nameContext generic_name() {
			return GetRuleContext<Generic_nameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		public Streotype_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streotype_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterStreotype_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitStreotype_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreotype_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Streotype_defContext streotype_def() {
		Streotype_defContext _localctx = new Streotype_defContext(Context, State);
		EnterRule(_localctx, 22, RULE_streotype_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			Match(T__0);
			State = 235;
			streotypename();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4 || _la==SPACE) {
				{
				State = 237;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 236;
					Match(SPACE);
					}
				}

				State = 239;
				Match(T__4);
				State = 240;
				generic_name();
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 241;
					Match(SPACE);
					}
				}

				State = 244;
				Match(T__5);
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 245;
					Match(SPACE);
					}
				}

				}
			}

			State = 250;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StreotypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StreotypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_streotypename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterStreotypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitStreotypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStreotypename(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StreotypenameContext streotypename() {
		StreotypenameContext _localctx = new StreotypenameContext(Context, State);
		EnterRule(_localctx, 24, RULE_streotypename);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Generic_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterGeneric_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitGeneric_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_nameContext generic_name() {
		Generic_nameContext _localctx = new Generic_nameContext(Context, State);
		EnterRule(_localctx, 26, RULE_generic_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multi_line_commentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public Multi_line_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multi_line_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterMulti_line_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitMulti_line_comment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulti_line_comment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multi_line_commentContext multi_line_comment() {
		Multi_line_commentContext _localctx = new Multi_line_commentContext(Context, State);
		EnterRule(_localctx, 28, RULE_multi_line_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			Match(T__6);
			State = 257;
			comment();
			State = 258;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SomethingsContext somethings() {
			return GetRuleContext<SomethingsContext>(0);
		}
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 30, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			somethings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERFACE() { return GetToken(PlantUMLGrammerParser.INTERFACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(PlantUMLGrammerParser.SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Interface_nameContext interface_name() {
			return GetRuleContext<Interface_nameContext>(0);
		}
		public Interface_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterInterface_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitInterface_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_defContext interface_def() {
		Interface_defContext _localctx = new Interface_defContext(Context, State);
		EnterRule(_localctx, 32, RULE_interface_def);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(INTERFACE);
			State = 263;
			Match(SPACE);
			State = 264;
			interface_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Color() { return GetToken(PlantUMLGrammerParser.Color, 0); }
		public ColorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_color; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterColor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitColor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColorContext color() {
		ColorContext _localctx = new ColorContext(Context, State);
		EnterRule(_localctx, 34, RULE_color);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			Match(Color);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtrafieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OwnerClassContext ownerClass() {
			return GetRuleContext<OwnerClassContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PlantUMLGrammerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessorContext accessor() {
			return GetRuleContext<AccessorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldTypeContext fieldType() {
			return GetRuleContext<FieldTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldNameContext fieldName() {
			return GetRuleContext<FieldNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldstreotypeContext[] fieldstreotype() {
			return GetRuleContexts<FieldstreotypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldstreotypeContext fieldstreotype(int i) {
			return GetRuleContext<FieldstreotypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodNameContext methodName() {
			return GetRuleContext<MethodNameContext>(0);
		}
		public ExtrafieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extrafield; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterExtrafield(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitExtrafield(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtrafield(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtrafieldContext extrafield() {
		ExtrafieldContext _localctx = new ExtrafieldContext(Context, State);
		EnterRule(_localctx, 36, RULE_extrafield);
		int _la;
		try {
			State = 310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				ownerClass();
				State = 270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 269;
					Match(SPACE);
					}
				}

				State = 272;
				Match(COLON);
				State = 273;
				Match(SPACE);
				State = 274;
				accessor();
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 275;
					Match(SPACE);
					}
				}

				State = 281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 278;
					fieldstreotype();
					}
					}
					State = 283;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 284;
				fieldType();
				State = 285;
				Match(SPACE);
				State = 286;
				fieldName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 288;
				ownerClass();
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 289;
					Match(SPACE);
					}
				}

				State = 292;
				Match(COLON);
				State = 293;
				Match(SPACE);
				State = 294;
				accessor();
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 295;
					Match(SPACE);
					}
				}

				State = 298;
				fieldType();
				State = 299;
				Match(SPACE);
				State = 300;
				methodName();
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 301;
					Match(SPACE);
					}
				}

				State = 304;
				Match(T__8);
				State = 306;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SPACE) {
					{
					State = 305;
					Match(SPACE);
					}
				}

				State = 308;
				Match(T__9);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FromContext from() {
			return GetRuleContext<FromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SPACE() { return GetTokens(PlantUMLGrammerParser.SPACE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE(int i) {
			return GetToken(PlantUMLGrammerParser.SPACE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RelationTypeContext relationType() {
			return GetRuleContext<RelationTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToContext to() {
			return GetRuleContext<ToContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityContext[] multiplicity() {
			return GetRuleContexts<MultiplicityContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicityContext multiplicity(int i) {
			return GetRuleContext<MultiplicityContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON() { return GetToken(PlantUMLGrammerParser.COLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LinktextContext linktext() {
			return GetRuleContext<LinktextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext[] direction() {
			return GetRuleContexts<DirectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction(int i) {
			return GetRuleContext<DirectionContext>(i);
		}
		public RelationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitRelation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationContext relation() {
		RelationContext _localctx = new RelationContext(Context, State);
		EnterRule(_localctx, 38, RULE_relation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			from();
			State = 313;
			Match(SPACE);
			State = 315;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 314;
				multiplicity();
				}
			}

			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SPACE) {
				{
				State = 317;
				Match(SPACE);
				}
			}

			State = 320;
			relationType();
			State = 322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 321;
				Match(SPACE);
				}
				break;
			}
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 324;
				multiplicity();
				}
			}

			State = 327;
			Match(SPACE);
			State = 328;
			to();
			State = 344;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 329;
				Match(SPACE);
				State = 330;
				Match(COLON);
				State = 332;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
				case 1:
					{
					State = 331;
					direction();
					}
					break;
				}
				State = 335;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 334;
					Match(SPACE);
					}
					break;
				}
				State = 337;
				linktext();
				State = 339;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 338;
					Match(SPACE);
					}
					break;
				}
				State = 342;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__4 || _la==T__5) {
					{
					State = 341;
					direction();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDirection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 40, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==T__5) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PlantUMLGrammerParser.STRING, 0); }
		public MultiplicityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterMultiplicity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitMultiplicity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicity(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicityContext multiplicity() {
		MultiplicityContext _localctx = new MultiplicityContext(Context, State);
		EnterRule(_localctx, 42, RULE_multiplicity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FromContext from() {
		FromContext _localctx = new FromContext(Context, State);
		EnterRule(_localctx, 44, RULE_from);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 350;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ToContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_to; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterTo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitTo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToContext to() {
		ToContext _localctx = new ToContext(Context, State);
		EnterRule(_localctx, 46, RULE_to);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 352;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlantUMLGrammerParser.Identifier, 0); }
		public Interface_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterInterface_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitInterface_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_nameContext interface_name() {
		Interface_nameContext _localctx = new Interface_nameContext(Context, State);
		EnterRule(_localctx, 48, RULE_interface_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 354;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinktextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SomethingsContext somethings() {
			return GetRuleContext<SomethingsContext>(0);
		}
		public LinktextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linktext; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterLinktext(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitLinktext(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLinktext(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LinktextContext linktext() {
		LinktextContext _localctx = new LinktextContext(Context, State);
		EnterRule(_localctx, 50, RULE_linktext);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			somethings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationTypeContext : ParserRuleContext {
		public RelationTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterRelationType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitRelationType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationTypeContext relationType() {
		RelationTypeContext _localctx = new RelationTypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_relationType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 522240L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorContext : ParserRuleContext {
		public AccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitAccessor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AccessorContext accessor() {
		AccessorContext _localctx = new AccessorContext(Context, State);
		EnterRule(_localctx, 54, RULE_accessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 3932160L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterFieldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitFieldName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldNameContext fieldName() {
		FieldNameContext _localctx = new FieldNameContext(Context, State);
		EnterRule(_localctx, 56, RULE_fieldName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MethodNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterMethodName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitMethodName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodNameContext methodName() {
		MethodNameContext _localctx = new MethodNameContext(Context, State);
		EnterRule(_localctx, 58, RULE_methodName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OwnerClassContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public OwnerClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ownerClass; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterOwnerClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitOwnerClass(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOwnerClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OwnerClassContext ownerClass() {
		OwnerClassContext _localctx = new OwnerClassContext(Context, State);
		EnterRule(_localctx, 60, RULE_ownerClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FieldTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterFieldType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitFieldType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldTypeContext fieldType() {
		FieldTypeContext _localctx = new FieldTypeContext(Context, State);
		EnterRule(_localctx, 62, RULE_fieldType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlantUMLGrammerParser.Identifier, 0); }
		public Class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterClass_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitClass_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_nameContext class_name() {
		Class_nameContext _localctx = new Class_nameContext(Context, State);
		EnterRule(_localctx, 64, RULE_class_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlantUMLGrammerParser.Identifier, 0); }
		public Enum_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterEnum_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitEnum_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_nameContext enum_name() {
		Enum_nameContext _localctx = new Enum_nameContext(Context, State);
		EnterRule(_localctx, 66, RULE_enum_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public Namespace_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterNamespace_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitNamespace_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_nameContext namespace_name() {
		Namespace_nameContext _localctx = new Namespace_nameContext(Context, State);
		EnterRule(_localctx, 68, RULE_namespace_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			dotIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(PlantUMLGrammerParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PlantUMLGrammerParser.STRING, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 70, RULE_identifier);
		try {
			State = 381;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 376;
				Match(Identifier);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 377;
				Match(T__21);
				State = 378;
				Match(Identifier);
				State = 379;
				Match(T__21);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 380;
				Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(PlantUMLGrammerParser.STRING, 0); }
		public DotIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterDotIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitDotIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDotIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DotIdentifierContext dotIdentifier() {
		DotIdentifierContext _localctx = new DotIdentifierContext(Context, State);
		EnterRule(_localctx, 72, RULE_dotIdentifier);
		try {
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 383;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 384;
				identifier();
				State = 385;
				Match(T__22);
				State = 386;
				dotIdentifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 388;
				Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Note_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOTE() { return GetToken(PlantUMLGrammerParser.NOTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPACE() { return GetToken(PlantUMLGrammerParser.SPACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SomethingsToEndNoteContext somethingsToEndNote() {
			return GetRuleContext<SomethingsToEndNoteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDNOTE() { return GetToken(PlantUMLGrammerParser.ENDNOTE, 0); }
		public Note_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_note_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterNote_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitNote_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNote_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Note_exprContext note_expr() {
		Note_exprContext _localctx = new Note_exprContext(Context, State);
		EnterRule(_localctx, 74, RULE_note_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			Match(NOTE);
			State = 392;
			Match(SPACE);
			State = 393;
			somethingsToEndNote();
			State = 394;
			Match(ENDNOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SomethingsToEndNoteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ENDNOTE() { return GetTokens(PlantUMLGrammerParser.ENDNOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDNOTE(int i) {
			return GetToken(PlantUMLGrammerParser.ENDNOTE, i);
		}
		public SomethingsToEndNoteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_somethingsToEndNote; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterSomethingsToEndNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitSomethingsToEndNote(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSomethingsToEndNote(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SomethingsToEndNoteContext somethingsToEndNote() {
		SomethingsToEndNoteContext _localctx = new SomethingsToEndNoteContext(Context, State);
		EnterRule(_localctx, 76, RULE_somethingsToEndNote);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 30786325577726L) != 0) {
				{
				{
				State = 396;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==ENDNOTE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 401;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SomethingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Unicode() { return GetTokens(PlantUMLGrammerParser.Unicode); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Unicode(int i) {
			return GetToken(PlantUMLGrammerParser.Unicode, i);
		}
		public SomethingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_somethings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.EnterSomethings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IPlantUMLGrammerListener typedListener = listener as IPlantUMLGrammerListener;
			if (typedListener != null) typedListener.ExitSomethings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IPlantUMLGrammerVisitor<TResult> typedVisitor = visitor as IPlantUMLGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSomethings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SomethingsContext somethings() {
		SomethingsContext _localctx = new SomethingsContext(Context, State);
		EnterRule(_localctx, 78, RULE_somethings);
		int _la;
		try {
			int _alt;
			State = 414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 402;
						MatchWildcard();
						}
						} 
					}
					State = 407;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 411;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Unicode) {
					{
					{
					State = 408;
					Match(Unicode);
					}
					}
					State = 413;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,44,417,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,0,5,0,84,8,0,10,0,12,
		0,87,9,0,1,0,3,0,90,8,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,3,1,99,8,1,1,1,1,1,
		5,1,103,8,1,10,1,12,1,106,9,1,1,1,1,1,1,2,5,2,111,8,2,10,2,12,2,114,9,
		2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,122,8,2,1,3,1,3,1,3,1,3,3,3,128,8,3,1,3,
		3,3,131,8,3,1,3,1,3,3,3,135,8,3,1,3,3,3,138,8,3,1,4,1,4,5,4,142,8,4,10,
		4,12,4,145,9,4,1,4,1,4,1,5,3,5,150,8,5,1,5,5,5,153,8,5,10,5,12,5,156,9,
		5,1,5,1,5,3,5,160,8,5,1,5,1,5,1,5,3,5,165,8,5,1,5,1,5,1,6,1,6,5,6,171,
		8,6,10,6,12,6,174,9,6,1,6,1,6,1,7,5,7,179,8,7,10,7,12,7,182,9,7,1,7,3,
		7,185,8,7,1,7,5,7,188,8,7,10,7,12,7,191,9,7,1,7,1,7,3,7,195,8,7,1,7,1,
		7,1,7,3,7,200,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,10,3,10,211,8,10,1,
		10,1,10,1,10,1,10,3,10,217,8,10,1,10,5,10,220,8,10,10,10,12,10,223,9,10,
		1,10,1,10,3,10,227,8,10,1,10,3,10,230,8,10,1,10,3,10,233,8,10,1,11,1,11,
		1,11,3,11,238,8,11,1,11,1,11,1,11,3,11,243,8,11,1,11,1,11,3,11,247,8,11,
		3,11,249,8,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,
		15,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,3,18,271,8,18,1,18,1,18,1,18,
		1,18,3,18,277,8,18,1,18,5,18,280,8,18,10,18,12,18,283,9,18,1,18,1,18,1,
		18,1,18,1,18,1,18,3,18,291,8,18,1,18,1,18,1,18,1,18,3,18,297,8,18,1,18,
		1,18,1,18,1,18,3,18,303,8,18,1,18,1,18,3,18,307,8,18,1,18,1,18,3,18,311,
		8,18,1,19,1,19,1,19,3,19,316,8,19,1,19,3,19,319,8,19,1,19,1,19,3,19,323,
		8,19,1,19,3,19,326,8,19,1,19,1,19,1,19,1,19,1,19,3,19,333,8,19,1,19,3,
		19,336,8,19,1,19,1,19,3,19,340,8,19,1,19,3,19,343,8,19,3,19,345,8,19,1,
		20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,
		27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,
		34,1,34,1,35,1,35,1,35,1,35,1,35,3,35,382,8,35,1,36,1,36,1,36,1,36,1,36,
		1,36,3,36,390,8,36,1,37,1,37,1,37,1,37,1,37,1,38,5,38,398,8,38,10,38,12,
		38,401,9,38,1,39,5,39,404,8,39,10,39,12,39,407,9,39,1,39,5,39,410,8,39,
		10,39,12,39,413,9,39,3,39,415,8,39,1,39,1,405,0,40,0,2,4,6,8,10,12,14,
		16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,
		64,66,68,70,72,74,76,78,0,5,1,0,3,4,1,0,5,6,1,0,11,18,1,0,18,21,1,0,42,
		42,437,0,80,1,0,0,0,2,94,1,0,0,0,4,112,1,0,0,0,6,123,1,0,0,0,8,139,1,0,
		0,0,10,149,1,0,0,0,12,168,1,0,0,0,14,180,1,0,0,0,16,203,1,0,0,0,18,207,
		1,0,0,0,20,232,1,0,0,0,22,234,1,0,0,0,24,252,1,0,0,0,26,254,1,0,0,0,28,
		256,1,0,0,0,30,260,1,0,0,0,32,262,1,0,0,0,34,266,1,0,0,0,36,310,1,0,0,
		0,38,312,1,0,0,0,40,346,1,0,0,0,42,348,1,0,0,0,44,350,1,0,0,0,46,352,1,
		0,0,0,48,354,1,0,0,0,50,356,1,0,0,0,52,358,1,0,0,0,54,360,1,0,0,0,56,362,
		1,0,0,0,58,364,1,0,0,0,60,366,1,0,0,0,62,368,1,0,0,0,64,370,1,0,0,0,66,
		372,1,0,0,0,68,374,1,0,0,0,70,381,1,0,0,0,72,389,1,0,0,0,74,391,1,0,0,
		0,76,399,1,0,0,0,78,414,1,0,0,0,80,85,5,33,0,0,81,84,3,2,1,0,82,84,3,4,
		2,0,83,81,1,0,0,0,83,82,1,0,0,0,84,87,1,0,0,0,85,83,1,0,0,0,85,86,1,0,
		0,0,86,89,1,0,0,0,87,85,1,0,0,0,88,90,5,37,0,0,89,88,1,0,0,0,89,90,1,0,
		0,0,90,91,1,0,0,0,91,92,5,34,0,0,92,93,5,0,0,1,93,1,1,0,0,0,94,95,5,24,
		0,0,95,96,5,37,0,0,96,98,3,68,34,0,97,99,5,37,0,0,98,97,1,0,0,0,98,99,
		1,0,0,0,99,100,1,0,0,0,100,104,5,35,0,0,101,103,3,4,2,0,102,101,1,0,0,
		0,103,106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,
		104,1,0,0,0,107,108,5,36,0,0,108,3,1,0,0,0,109,111,5,37,0,0,110,109,1,
		0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,121,1,0,0,0,
		114,112,1,0,0,0,115,122,3,74,37,0,116,122,3,6,3,0,117,122,3,20,10,0,118,
		122,3,36,18,0,119,122,3,38,19,0,120,122,5,38,0,0,121,115,1,0,0,0,121,116,
		1,0,0,0,121,117,1,0,0,0,121,118,1,0,0,0,121,119,1,0,0,0,121,120,1,0,0,
		0,122,5,1,0,0,0,123,124,5,26,0,0,124,125,5,37,0,0,125,127,3,66,33,0,126,
		128,5,37,0,0,127,126,1,0,0,0,127,128,1,0,0,0,128,130,1,0,0,0,129,131,3,
		22,11,0,130,129,1,0,0,0,130,131,1,0,0,0,131,134,1,0,0,0,132,133,5,37,0,
		0,133,135,3,34,17,0,134,132,1,0,0,0,134,135,1,0,0,0,135,137,1,0,0,0,136,
		138,3,12,6,0,137,136,1,0,0,0,137,138,1,0,0,0,138,7,1,0,0,0,139,143,5,35,
		0,0,140,142,3,10,5,0,141,140,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,
		144,1,0,0,0,144,146,1,0,0,0,145,143,1,0,0,0,146,147,5,36,0,0,147,9,1,0,
		0,0,148,150,3,18,9,0,149,148,1,0,0,0,149,150,1,0,0,0,150,154,1,0,0,0,151,
		153,3,16,8,0,152,151,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,
		0,0,0,155,164,1,0,0,0,156,154,1,0,0,0,157,159,3,54,27,0,158,160,5,37,0,
		0,159,158,1,0,0,0,159,160,1,0,0,0,160,161,1,0,0,0,161,162,3,62,31,0,162,
		163,5,37,0,0,163,165,1,0,0,0,164,157,1,0,0,0,164,165,1,0,0,0,165,166,1,
		0,0,0,166,167,3,56,28,0,167,11,1,0,0,0,168,172,5,35,0,0,169,171,3,14,7,
		0,170,169,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,
		175,1,0,0,0,174,172,1,0,0,0,175,176,5,36,0,0,176,13,1,0,0,0,177,179,5,
		37,0,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,
		181,184,1,0,0,0,182,180,1,0,0,0,183,185,3,18,9,0,184,183,1,0,0,0,184,185,
		1,0,0,0,185,189,1,0,0,0,186,188,3,16,8,0,187,186,1,0,0,0,188,191,1,0,0,
		0,189,187,1,0,0,0,189,190,1,0,0,0,190,199,1,0,0,0,191,189,1,0,0,0,192,
		194,3,54,27,0,193,195,5,37,0,0,194,193,1,0,0,0,194,195,1,0,0,0,195,196,
		1,0,0,0,196,197,3,62,31,0,197,198,5,37,0,0,198,200,1,0,0,0,199,192,1,0,
		0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,202,3,56,28,0,202,15,1,0,0,0,203,
		204,5,1,0,0,204,205,3,24,12,0,205,206,5,2,0,0,206,17,1,0,0,0,207,208,7,
		0,0,0,208,19,1,0,0,0,209,211,5,27,0,0,210,209,1,0,0,0,210,211,1,0,0,0,
		211,212,1,0,0,0,212,213,5,25,0,0,213,214,5,37,0,0,214,216,3,64,32,0,215,
		217,5,37,0,0,216,215,1,0,0,0,216,217,1,0,0,0,217,221,1,0,0,0,218,220,3,
		22,11,0,219,218,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,
		0,222,226,1,0,0,0,223,221,1,0,0,0,224,225,5,37,0,0,225,227,3,34,17,0,226,
		224,1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,230,3,8,4,0,229,228,1,
		0,0,0,229,230,1,0,0,0,230,233,1,0,0,0,231,233,3,32,16,0,232,210,1,0,0,
		0,232,231,1,0,0,0,233,21,1,0,0,0,234,235,5,1,0,0,235,248,3,24,12,0,236,
		238,5,37,0,0,237,236,1,0,0,0,237,238,1,0,0,0,238,239,1,0,0,0,239,240,5,
		5,0,0,240,242,3,26,13,0,241,243,5,37,0,0,242,241,1,0,0,0,242,243,1,0,0,
		0,243,244,1,0,0,0,244,246,5,6,0,0,245,247,5,37,0,0,246,245,1,0,0,0,246,
		247,1,0,0,0,247,249,1,0,0,0,248,237,1,0,0,0,248,249,1,0,0,0,249,250,1,
		0,0,0,250,251,5,2,0,0,251,23,1,0,0,0,252,253,3,70,35,0,253,25,1,0,0,0,
		254,255,3,70,35,0,255,27,1,0,0,0,256,257,5,7,0,0,257,258,3,30,15,0,258,
		259,5,8,0,0,259,29,1,0,0,0,260,261,3,78,39,0,261,31,1,0,0,0,262,263,5,
		28,0,0,263,264,5,37,0,0,264,265,3,48,24,0,265,33,1,0,0,0,266,267,5,44,
		0,0,267,35,1,0,0,0,268,270,3,60,30,0,269,271,5,37,0,0,270,269,1,0,0,0,
		270,271,1,0,0,0,271,272,1,0,0,0,272,273,5,29,0,0,273,274,5,37,0,0,274,
		276,3,54,27,0,275,277,5,37,0,0,276,275,1,0,0,0,276,277,1,0,0,0,277,281,
		1,0,0,0,278,280,3,16,8,0,279,278,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,
		0,281,282,1,0,0,0,282,284,1,0,0,0,283,281,1,0,0,0,284,285,3,62,31,0,285,
		286,5,37,0,0,286,287,3,56,28,0,287,311,1,0,0,0,288,290,3,60,30,0,289,291,
		5,37,0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,293,5,29,
		0,0,293,294,5,37,0,0,294,296,3,54,27,0,295,297,5,37,0,0,296,295,1,0,0,
		0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,3,62,31,0,299,300,5,37,0,0,300,
		302,3,58,29,0,301,303,5,37,0,0,302,301,1,0,0,0,302,303,1,0,0,0,303,304,
		1,0,0,0,304,306,5,9,0,0,305,307,5,37,0,0,306,305,1,0,0,0,306,307,1,0,0,
		0,307,308,1,0,0,0,308,309,5,10,0,0,309,311,1,0,0,0,310,268,1,0,0,0,310,
		288,1,0,0,0,311,37,1,0,0,0,312,313,3,44,22,0,313,315,5,37,0,0,314,316,
		3,42,21,0,315,314,1,0,0,0,315,316,1,0,0,0,316,318,1,0,0,0,317,319,5,37,
		0,0,318,317,1,0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,322,3,52,26,0,
		321,323,5,37,0,0,322,321,1,0,0,0,322,323,1,0,0,0,323,325,1,0,0,0,324,326,
		3,42,21,0,325,324,1,0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,328,5,37,
		0,0,328,344,3,46,23,0,329,330,5,37,0,0,330,332,5,29,0,0,331,333,3,40,20,
		0,332,331,1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,336,5,37,0,0,335,
		334,1,0,0,0,335,336,1,0,0,0,336,337,1,0,0,0,337,339,3,50,25,0,338,340,
		5,37,0,0,339,338,1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,343,3,40,
		20,0,342,341,1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,0,344,329,1,0,0,0,344,
		345,1,0,0,0,345,39,1,0,0,0,346,347,7,1,0,0,347,41,1,0,0,0,348,349,5,30,
		0,0,349,43,1,0,0,0,350,351,3,70,35,0,351,45,1,0,0,0,352,353,3,70,35,0,
		353,47,1,0,0,0,354,355,5,41,0,0,355,49,1,0,0,0,356,357,3,78,39,0,357,51,
		1,0,0,0,358,359,7,2,0,0,359,53,1,0,0,0,360,361,7,3,0,0,361,55,1,0,0,0,
		362,363,3,70,35,0,363,57,1,0,0,0,364,365,3,70,35,0,365,59,1,0,0,0,366,
		367,3,70,35,0,367,61,1,0,0,0,368,369,3,70,35,0,369,63,1,0,0,0,370,371,
		5,41,0,0,371,65,1,0,0,0,372,373,5,41,0,0,373,67,1,0,0,0,374,375,3,72,36,
		0,375,69,1,0,0,0,376,382,5,41,0,0,377,378,5,22,0,0,378,379,5,41,0,0,379,
		382,5,22,0,0,380,382,5,30,0,0,381,376,1,0,0,0,381,377,1,0,0,0,381,380,
		1,0,0,0,382,71,1,0,0,0,383,390,3,70,35,0,384,385,3,70,35,0,385,386,5,23,
		0,0,386,387,3,72,36,0,387,390,1,0,0,0,388,390,5,30,0,0,389,383,1,0,0,0,
		389,384,1,0,0,0,389,388,1,0,0,0,390,73,1,0,0,0,391,392,5,40,0,0,392,393,
		5,37,0,0,393,394,3,76,38,0,394,395,5,42,0,0,395,75,1,0,0,0,396,398,8,4,
		0,0,397,396,1,0,0,0,398,401,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,
		77,1,0,0,0,401,399,1,0,0,0,402,404,9,0,0,0,403,402,1,0,0,0,404,407,1,0,
		0,0,405,406,1,0,0,0,405,403,1,0,0,0,406,415,1,0,0,0,407,405,1,0,0,0,408,
		410,5,43,0,0,409,408,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,1,
		0,0,0,412,415,1,0,0,0,413,411,1,0,0,0,414,405,1,0,0,0,414,411,1,0,0,0,
		415,79,1,0,0,0,55,83,85,89,98,104,112,121,127,130,134,137,143,149,154,
		159,164,172,180,184,189,194,199,210,216,221,226,229,232,237,242,246,248,
		270,276,281,290,296,302,306,310,315,318,322,325,332,335,339,342,344,381,
		389,399,405,411,414
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
